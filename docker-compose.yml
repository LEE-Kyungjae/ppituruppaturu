version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: ppituru_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ppituru_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ppituru_2024}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./pp-backend/internal/migrations/initdb:/docker-entrypoint-initdb.d
    networks:
      - ppituru_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: ppituru_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - ppituru_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Go 백엔드 서버
  backend:
    build:
      context: ./pp-backend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    container_name: ppituru_backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8080}:8080"
      - "${WEBSOCKET_PORT:-8082}:8082"
    environment:
      - GO_ENV=${GO_ENV:-production}
      - DSN=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-ppituru_2024}@postgres:5432/${POSTGRES_DB:-ppituru_db}?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - REFRESH_SECRET=${REFRESH_SECRET}
      - KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
      - KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET}
      - KAKAO_REDIRECT_URI=${KAKAO_REDIRECT_URI:-http://localhost:3000/auth/kakao/callback}
      - PORT=8080
      - WEBSOCKET_PORT=8082
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ppituru_network
    healthcheck:
      test: ["CMD", "/server", "--healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js 프론트엔드
  frontend:
    build:
      context: ./pp-frontend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    container_name: ppituru_frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8080}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:8082}
      - NEXT_PUBLIC_KAKAO_CLIENT_ID=${NEXT_PUBLIC_KAKAO_CLIENT_ID}
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL:-http://localhost:3000}
      - PORT=3000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ppituru_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ppituru_network:
    driver: bridge
