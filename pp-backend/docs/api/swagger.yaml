# docs/swagger.yaml

definitions:
  handler.LoginReq:
    properties:
      password:
        example: pass1234
        type: string
      username:
        example: admin
        type: string
    required:
    - password
    - username
    type: object
  handler.RefreshReq:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  handler.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
    type: object
  handler.loginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  handler.meResponse:
    properties:
      role:
        example: user
        type: string
      user:
        example: alice
        type: string
    type: object
  handler.refreshResponse:
    properties:
      access_token:
        type: string
    type: object
  handler.registerRequest:
    properties:
      password:
        example: password123
        maxLength: 72
        minLength: 8
        type: string
      username:
        example: newuser
        maxLength: 32
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  handler.statsResponse:
    properties:
      uptime:
        example: 1m2.345s
        type: string
    type: object
  handler.updateUserRequest:
    properties:
      role:
        enum:
        - user
        - admin
        example: admin
        type: string
    required:
    - role
    type: object
  handler.userResponse:
    properties:
      role:
        example: user
        type: string
      username:
        example: newuser
        type: string
    type: object
info:
  contact: {}
paths:
  /admin/stats:
    get:
      description: Retrieves application statistics, such as uptime. Requires admin
        privileges.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.statsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.Response'
      security:
      - BearerAuth: []
      summary: Get application statistics
      tags:
      - Admin
  /admin/users:
    get:
      description: Retrieves a list of all users. Requires admin privileges.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handler.userResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Response'
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - User Management
  /admin/users/{username}:
    delete:
      description: Deletes a user by their username. Requires admin privileges.
      parameters:
      - description: Username to delete
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Response'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - User Management
    put:
      consumes:
      - application/json
      description: Updates a user's role. Requires admin privileges.
      parameters:
      - description: Username to update
        in: path
        name: username
        required: true
        type: string
      - description: New role for the user
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/handler.updateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.userResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Response'
      security:
      - BearerAuth: []
      summary: Update a user's role
      tags:
      - User Management
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns JWT tokens.
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handler.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.loginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Response'
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidates a refresh token.
      parameters:
      - description: Refresh token to invalidate
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/handler.RefreshReq'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: User logout
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes an access token using a valid refresh token.
      parameters:
      - description: Refresh token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/handler.RefreshReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.refreshResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Refresh access token
      tags:
      - Authentication
  /me:
    get:
      description: Retrieves the authenticated user's profile information from the
        JWT.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.meResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.Response'
      security:
      - BearerAuth: []
      summary: Get current user info
      tags:
      - User
  /users:
    post:
      consumes:
      - application/json
      description: Creates a new user with a username and password.
      parameters:
      - description: User Registration Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.registerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.userResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/handler.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Response'
      summary: Register a new user
      tags:
      - User Management
swagger: "2.0"