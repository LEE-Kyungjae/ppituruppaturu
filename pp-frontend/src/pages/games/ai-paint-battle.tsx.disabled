/**
 * AI Paint Battle Game Page
 * AI 기능이 완전히 통합된 페인트 배틀 게임
 */

import React, { useState, useEffect } from 'react'
import Head from 'next/head'
import { useRouter } from 'next/router'

// Game Components
import CollaborativePaintCanvas from '../../components/game/CollaborativePaintCanvas'
import AchievementPanel from '../../components/ui/AchievementPanel'
import GameAnalyticsDashboard from '../../components/analytics/GameAnalyticsDashboard'
import AIControlCenter from '../../components/ai/AIControlCenter'
import AdvancedRoomSettings from '../../components/multiplayer/AdvancedRoomSettings'

import { useAchievements } from '../../lib/game-engine/AchievementSystem'

// Hooks and Engines
import { useMultiplayer } from '../../lib/multiplayer/MultiplayerManager'
import { useGameAI } from '../../lib/ai/GameAIEngine'
import { usePerformanceMonitor } from '../../lib/monitoring/PerformanceMonitor'
import { gameAnalytics } from '../../lib/analytics/GameAnalyticsEngine'

interface GameState {
  status: 'menu' | 'lobby' | 'playing' | 'finished'
  startTime?: number
  playerStats: {
    paintCoverage: number
    territoryControlled: number
    paintStrokes: number
    powerUpsCollected: number
  }
}

import dynamic from 'next/dynamic'

const AIPaintBattlePage = dynamic(() => Promise.resolve(AIPaintBattlePageInner), { ssr: false });

const AIPaintBattlePageInner: React.FC = () => {
  const router = useRouter()

  // Game State
  const [gameState, setGameState] = useState<GameState>({
    status: 'menu',
    playerStats: {
      paintCoverage: 0,
      territoryControlled: 0,
      paintStrokes: 0,
      powerUpsCollected: 0
    }
  })

  // UI State
  const [showAchievements, setShowAchievements] = useState(false)
  const [showAnalytics, setShowAnalytics] = useState(false)
  const [showAIControl, setShowAIControl] = useState(false)
  const [showRoomSettings, setShowRoomSettings] = useState(false)
  const [playerName, setPlayerName] = useState('')

  // Hooks
  const { isConnected, currentRoom, currentPlayer, connect, createRoom, startGame } = useMultiplayer()
  const { gameBalance, spawnAIPlayer } = useGameAI()
  const { progress, notifications, trackGameResult } = useAchievements()
  const { metrics, startMonitoring, stopMonitoring } = usePerformanceMonitor()

  // Initialize game systems
  useEffect(() => {
    startMonitoring()

    if (!isConnected) {
      connect().catch(console.error)
    }

    return () => {
      stopMonitoring()
    }
  }, [isConnected, connect, startMonitoring, stopMonitoring])

  // Handle game events
  useEffect(() => {
    const handleGameEvent = (event: CustomEvent) => {
      const { type, data } = event.detail

      switch (type) {
        case 'paint_stroke':
          setGameState(prev => ({
            ...prev,
            playerStats: {
              ...prev.playerStats,
              paintStrokes: prev.playerStats.paintStrokes + 1
            }
          }))
          break

        case 'territory_update':
          setGameState(prev => ({
            ...prev,
            playerStats: {
              ...prev.playerStats,
              territoryControlled: data.territory || 0
            }
          }))
          break

        case 'powerup_collected':
          setGameState(prev => ({
            ...prev,
            playerStats: {
              ...prev.playerStats,
              powerUpsCollected: prev.playerStats.powerUpsCollected + 1
            }
          }))
          break

        case 'game_end':
          handleGameEnd(data.result, data.finalScore)
          break
      }
    }

    if (typeof window !== 'undefined') {
      window.addEventListener('gameEvent', handleGameEvent as EventListener)
      return () => window.removeEventListener('gameEvent', handleGameEvent as EventListener)
    }
  }, [])

  const handleStartGame = async () => {
    if (!playerName.trim()) {
      alert('플레이어 이름을 입력해주세요!')
      return
    }

    try {
      // Start analytics session
      gameAnalytics.startGameSession('ai_paint_battle', {
        ai_enabled: true,
        difficulty: 'adaptive',
        max_players: 4
      })

      // Create room with AI settings
      const roomSettings = {
        roomName: `${playerName}의 AI 배틀`,
        timeLimit: 300,
        maxPlayers: 4,
        paintTarget: 80,
        powerUpsEnabled: true,
        friendlyFire: false,
        gameMode: 'paint_battle' as any,
        isPrivate: false,
        allowSpectators: true,
        roundLimit: 1,
        paintDecayRate: 0,
        powerUpSpawnRate: 30,
        territoryBonus: true,
        chatEnabled: true,
        voiceChatEnabled: false,
        autoMatchmaking: true,
        skillBasedMatching: true,
        regionRestriction: 'global'
      }

      await createRoom(roomSettings)

      // Spawn AI players
      spawnAIPlayer('ai_aggressive', 600)
      spawnAIPlayer('ai_creative', 550)
      spawnAIPlayer('ai_balanced', 500)

      setGameState(prev => ({
        ...prev,
        status: 'playing',
        startTime: Date.now()
      }))

    } catch (error) {
      console.error('게임 시작 실패:', error)
      alert('게임 시작에 실패했습니다.')
    }
  }

  const handleGameEnd = (result: 'win' | 'lose' | 'draw', finalScore: number) => {
    // Track game result
    trackGameResult(result === 'win', {
      isPerfect: gameState.playerStats.territoryControlled > 90,
      isComeback: false, // 간단히 처리
      glitchMode: false,
      territoryPercentage: gameState.playerStats.territoryControlled
    })

    // End analytics session
    gameAnalytics.endGameSession(result, finalScore)

    setGameState(prev => ({ ...prev, status: 'finished' }))
  }

  const handleTerritoryUpdate = (stats: any[]) => {
    const playerStat = stats.find(s => s.playerId === currentPlayer?.id)
    if (playerStat) {
      setGameState(prev => ({
        ...prev,
        playerStats: {
          ...prev.playerStats,
          territoryControlled: playerStat.coverage
        }
      }))

      // Dispatch territory update event
      if (typeof window !== 'undefined') {
        window.dispatchEvent(new CustomEvent('gameEvent', {
          detail: {
            type: 'territory_update',
            data: { territory: playerStat.coverage }
          }
        }))
      }
    }
  }

  const renderMainMenu = () => (
    <div className="main-menu min-h-screen bg-black text-white flex items-center justify-center">
      <div className="menu-container bg-gray-900 border border-cyber-blue rounded-lg p-8 max-w-md w-full shadow-cyber-blue">
        <h1 className="text-3xl font-bold text-cyber-blue mb-6 text-center font-mono">
          AI PAINT BATTLE
        </h1>

        <div className="space-y-4">
          <div className="input-group">
            <label className="block text-sm text-gray-400 mb-2">PLAYER NAME</label>
            <input
              type="text"
              value={playerName}
              onChange={(e) => setPlayerName(e.target.value)}
              className="w-full px-4 py-2 bg-gray-800 border border-gray-600 rounded text-white focus:border-cyber-blue focus:outline-none"
              placeholder="Enter your name..."
              maxLength={20}
            />
          </div>

          <button
            onClick={handleStartGame}
            disabled={!playerName.trim() || !isConnected}
            className="w-full py-3 bg-cyber-blue text-black font-bold rounded hover:bg-blue-600 disabled:bg-gray-600 disabled:text-gray-400 transition-colors"
          >
            {!isConnected ? 'CONNECTING...' : 'START AI BATTLE'}
          </button>

          <div className="connection-status text-center">
            <div className={`text-xs flex items-center justify-center space-x-2 ${
              isConnected ? 'text-green-400' : 'text-red-400'
            }`}>
              <div className={`w-2 h-2 rounded-full ${
                isConnected ? 'bg-green-400' : 'bg-red-400'
              } animate-pulse`} />
              <span>{isConnected ? 'CONNECTED TO SERVER' : 'CONNECTING TO SERVER...'}</span>
            </div>
          </div>

          <div className="menu-actions grid grid-cols-2 gap-2 mt-6">
            <button
              onClick={() => setShowAchievements(true)}
              className="py-2 px-4 bg-gray-700 text-white rounded text-sm hover:bg-gray-600 transition-colors"
            >
              ACHIEVEMENTS
            </button>
            <button
              onClick={() => setShowAnalytics(true)}
              className="py-2 px-4 bg-gray-700 text-white rounded text-sm hover:bg-gray-600 transition-colors"
            >
              ANALYTICS
            </button>
          </div>
        </div>

        {/* System Status */}
        <div className="system-status mt-6 pt-4 border-t border-gray-700">
          <div className="text-xs text-gray-400 space-y-1">
            <div className="flex justify-between">
              <span>AI Engine:</span>
              <span className="text-green-400">ACTIVE</span>
            </div>
            <div className="flex justify-between">
              <span>Performance Monitor:</span>
              <span className="text-green-400">TRACKING</span>
            </div>
            <div className="flex justify-between">
              <span>Analytics System:</span>
              <span className="text-green-400">READY</span>
            </div>
            {gameBalance && (
              <div className="flex justify-between">
                <span>Game Balance:</span>
                <span className={`${
                  gameBalance.skill_variance < 0.5 ? 'text-green-400' : 'text-yellow-400'
                }`}>
                  {gameBalance.skill_variance < 0.5 ? 'BALANCED' : 'ADJUSTING'}
                </span>
              </div>
            )}
          </div>
        </div>
      </div>

      <style jsx>{`
        .shadow-cyber-blue {
          box-shadow: 0 0 20px rgba(64, 128, 255, 0.3);
        }
        .text-cyber-blue {
          color: #4080ff;
        }
        .bg-cyber-blue {
          background-color: #4080ff;
        }
        .border-cyber-blue {
          border-color: #4080ff;
        }
      `}</style>
    </div>
  )

  const renderGameUI = () => (
    <div className="game-ui min-h-screen bg-black text-white">
      {/* Header */}
      <div className="game-header bg-gray-900 border-b border-gray-700 p-4">
        <div className="flex justify-between items-center">
          <div className="game-info">
            <h1 className="text-xl font-bold text-cyber-blue font-mono">AI PAINT BATTLE</h1>
            {currentRoom && (
              <div className="text-sm text-gray-400">
                Room: {currentRoom.name} | Players: {currentRoom.players.length}/{currentRoom.maxPlayers}
              </div>
            )}
          </div>

          <div className="game-stats flex space-x-6 text-sm">
            <div className="stat">
              <span className="text-gray-400">Territory:</span>
              <span className="text-cyber-green ml-1">{gameState.playerStats.territoryControlled.toFixed(1)}%</span>
            </div>
            <div className="stat">
              <span className="text-gray-400">Strokes:</span>
              <span className="text-white ml-1">{gameState.playerStats.paintStrokes}</span>
            </div>
            <div className="stat">
              <span className="text-gray-400">Power-ups:</span>
              <span className="text-yellow-400 ml-1">{gameState.playerStats.powerUpsCollected}</span>
            </div>
          </div>

          <div className="game-controls flex space-x-2">
            <button
              onClick={() => setShowAIControl(true)}
              className="px-3 py-1 bg-purple-600 text-white rounded text-xs hover:bg-purple-700 transition-colors"
            >
              AI CONTROL
            </button>
            <button
              onClick={() => setShowAnalytics(true)}
              className="px-3 py-1 bg-blue-600 text-white rounded text-xs hover:bg-blue-700 transition-colors"
            >
              ANALYTICS
            </button>
            <button
              onClick={() => router.push('/')}
              className="px-3 py-1 bg-gray-600 text-white rounded text-xs hover:bg-gray-700 transition-colors"
            >
              EXIT
            </button>
          </div>
        </div>
      </div>

      {/* Main Game Area */}
      <div className="game-area p-4">
        <CollaborativePaintCanvas
          width={800}
          height={600}
          onTerritoryUpdate={handleTerritoryUpdate}
        />
      </div>

      {/* Performance Monitor Overlay */}
      {metrics && (
        <div className="performance-overlay fixed top-4 right-4 bg-black bg-opacity-80 rounded p-2 text-xs">
          <div className="text-cyber-blue">PERFORMANCE</div>
          <div className="text-white">FPS: {Math.round(metrics.fps)}</div>
          <div className="text-white">Memory: {Math.round(metrics.memoryUsage)}MB</div>
          <div className="text-white">Latency: {Math.round(metrics.networkLatency)}ms</div>
        </div>
      )}

      <style jsx>{`
        .text-cyber-blue { color: #4080ff; }
        .text-cyber-green { color: #00ff80; }
      `}</style>
    </div>
  )

  const renderGameFinished = () => (
    <div className="game-finished min-h-screen bg-black text-white flex items-center justify-center">
      <div className="results-container bg-gray-900 border border-cyber-blue rounded-lg p-8 max-w-lg w-full shadow-cyber-blue">
        <h1 className="text-3xl font-bold text-cyber-blue mb-6 text-center font-mono">
          GAME COMPLETE
        </h1>

        <div className="game-results space-y-4">
          <div className="final-stats bg-gray-800 rounded p-4">
            <h3 className="text-white font-bold mb-3">FINAL STATISTICS</h3>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-400">Territory Controlled:</span>
                <div className="text-cyber-green font-mono">{gameState.playerStats.territoryControlled.toFixed(1)}%</div>
              </div>
              <div>
                <span className="text-gray-400">Paint Strokes:</span>
                <div className="text-white font-mono">{gameState.playerStats.paintStrokes}</div>
              </div>
              <div>
                <span className="text-gray-400">Power-ups Collected:</span>
                <div className="text-yellow-400 font-mono">{gameState.playerStats.powerUpsCollected}</div>
              </div>
              <div>
                <span className="text-gray-400">Game Duration:</span>
                <div className="text-white font-mono">
                  {gameState.startTime ? Math.floor((Date.now() - gameState.startTime) / 1000) : 0}s
                </div>
              </div>
            </div>
          </div>

          <div className="level-progress bg-gray-800 rounded p-4">
            <h3 className="text-white font-bold mb-3">LEVEL PROGRESS</h3>
            <div className="flex justify-between text-sm text-gray-400 mb-2">
              <span>Level {progress.level}</span>
              <span>{progress.experience} / {progress.experienceToNext} XP</span>
            </div>
            <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
              <div
                className="h-full bg-cyber-blue transition-all duration-500"
                style={{ width: `${(progress.experience / progress.experienceToNext) * 100}%` }}
              />
            </div>
          </div>

          <div className="action-buttons grid grid-cols-2 gap-4">
            <button
              onClick={() => setGameState(prev => ({ ...prev, status: 'menu' }))}
              className="py-2 px-4 bg-cyber-blue text-black font-bold rounded hover:bg-blue-600 transition-colors"
            >
              PLAY AGAIN
            </button>
            <button
              onClick={() => setShowAchievements(true)}
              className="py-2 px-4 bg-gray-700 text-white rounded hover:bg-gray-600 transition-colors"
            >
              ACHIEVEMENTS
            </button>
          </div>
        </div>
      </div>

      <style jsx>{`
        .shadow-cyber-blue { box-shadow: 0 0 20px rgba(64, 128, 255, 0.3); }
        .text-cyber-blue { color: #4080ff; }
        .text-cyber-green { color: #00ff80; }
        .bg-cyber-blue { background-color: #4080ff; }
        .border-cyber-blue { border-color: #4080ff; }
      `}</style>
    </div>
  )

  return (
    <>
      <Head>
        <title>AI Paint Battle - 삐뚜루빠뚜루</title>
        <meta name="description" content="AI-powered collaborative paint battle game" />
      </Head>

      {/* Main Game Content */}
      {gameState.status === 'menu' && renderMainMenu()}
      {gameState.status === 'playing' && renderGameUI()}
      {gameState.status === 'finished' && renderGameFinished()}

      {/* Modal Overlays */}
      <AchievementPanel
        isOpen={showAchievements}
        onClose={() => setShowAchievements(false)}
      />

      <GameAnalyticsDashboard
        isOpen={showAnalytics}
        onClose={() => setShowAnalytics(false)}
      />

      <AIControlCenter
        isOpen={showAIControl}
        onClose={() => setShowAIControl(false)}
      />

      <AdvancedRoomSettings
        isOpen={showRoomSettings}
        settings={{
          roomName: 'AI Battle Room',
          timeLimit: 300,
          maxPlayers: 4,
          paintTarget: 80,
          powerUpsEnabled: true,
          friendlyFire: false,
          gameMode: 'paint_battle' as any,
          isPrivate: false,
          allowSpectators: true,
          roundLimit: 1,
          paintDecayRate: 0,
          powerUpSpawnRate: 30,
          territoryBonus: true,
          chatEnabled: true,
          voiceChatEnabled: false,
          autoMatchmaking: true,
          skillBasedMatching: true,
          regionRestriction: 'global'
        }}
        onChange={() => {}}
        onClose={() => setShowRoomSettings(false)}
        onConfirm={() => setShowRoomSettings(false)}
      />

      {/* Achievement Notifications */}
      {notifications.map((notification) => (
        <div
          key={notification.achievement.id}
          className="achievement-notification fixed top-4 right-4 bg-black border border-cyber-blue rounded-lg p-4 shadow-cyber-blue animate-slide-in-right z-50"
        >
          <div className="flex items-center space-x-3">
            <div className="text-2xl">{notification.achievement.icon}</div>
            <div>
              <div className="text-cyber-blue font-bold text-sm">ACHIEVEMENT UNLOCKED!</div>
              <div className="text-white font-bold">{notification.achievement.title}</div>
              <div className="text-gray-400 text-xs">{notification.achievement.description}</div>
            </div>
          </div>
        </div>
      ))}

      <style jsx global>{`
        @keyframes slide-in-right {
          from {
            transform: translateX(100%);
            opacity: 0;
          }
          to {
            transform: translateX(0);
            opacity: 1;
          }
        }
        .animate-slide-in-right {
          animation: slide-in-right 0.5s ease-out;
        }
        .text-cyber-blue { color: #4080ff; }
        .text-cyber-green { color: #00ff80; }
        .bg-cyber-blue { background-color: #4080ff; }
        .border-cyber-blue { border-color: #4080ff; }
        .shadow-cyber-blue { box-shadow: 0 0 20px rgba(64, 128, 255, 0.3); }
      `}</style>
    </>
  )
}

export default AIPaintBattlePage;