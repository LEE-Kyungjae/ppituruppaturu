name: CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Backend Build & Test
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('pp-backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Go dependencies
        working-directory: pp-backend
        run: go mod download

      - name: Run Go tests
        working-directory: pp-backend
        env:
          DSN: postgres://test_user:test_password@localhost:5432/test_db?sslmode=disable
          JWT_SECRET: test_jwt_secret_12345678901234567890
          REFRESH_SECRET: test_refresh_secret_12345678901234567890
        run: go test -v ./...

      # Frontend Build & Test
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: pp-frontend/package-lock.json

      - name: Install Node.js dependencies
        working-directory: pp-frontend
        run: npm ci

      - name: Run TypeScript check
        working-directory: pp-frontend
        run: npm run type-check

      - name: Build frontend
        working-directory: pp-frontend
        env:
          NEXT_PUBLIC_API_URL: http://152.67.201.101/api
          NEXT_PUBLIC_WS_URL: ws://152.67.201.101/ws
        run: npm run build

      # Docker Build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build Backend Image
      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./pp-backend
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

      # Build Frontend Image
      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./pp-frontend
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

      # Deploy to Production
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Deploy to server
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /opt/pitturu

            echo "🐳 GHCR 로그인"
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            echo "🛑 기존 컨테이너 정지"
            docker-compose -f docker-compose.prod.yml down || true

            echo "📥 최신 이미지 풀"
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}

            echo "📝 Docker Compose 파일 업데이트"
            cat > docker-compose.prod.yml << 'COMPOSE_EOF'
          version: '3.8'
          services:
            postgres:
              image: postgres:15-alpine
              restart: unless-stopped
              environment:
                POSTGRES_DB: ${POSTGRES_DB:-pitturu_db}
                POSTGRES_USER: ${POSTGRES_USER:-postgres}
                POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
              ports:
                - "5432:5432"
              volumes:
                - postgres_data:/var/lib/postgresql/data
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
                interval: 30s
                timeout: 10s
                retries: 3

            redis:
              image: redis:7-alpine
              restart: unless-stopped
              ports:
                - "6379:6379"
              volumes:
                - redis_data:/data

            backend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
              restart: unless-stopped
              ports:
                - "8080:8080"
                - "8082:8082"
              environment:
                - DSN=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pitturu_db}?sslmode=disable
                - REDIS_URL=redis://redis:6379
                - JWT_SECRET=${JWT_SECRET}
                - REFRESH_SECRET=${REFRESH_SECRET}
              depends_on:
                postgres:
                  condition: service_healthy

            frontend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
              restart: unless-stopped
              ports:
                - "3000:3000"
              environment:
                - NEXT_PUBLIC_API_URL=http://152.67.201.101/api
                - NEXT_PUBLIC_WS_URL=ws://152.67.201.101/ws
              depends_on:
                - backend

          volumes:
            postgres_data:
            redis_data:
          COMPOSE_EOF

            echo "🚀 서비스 시작"
            docker-compose -f docker-compose.prod.yml up -d

            echo "⏰ 헬스체크 대기"
            sleep 30

            echo "🔍 서비스 상태 확인"
            docker-compose -f docker-compose.prod.yml ps

            echo "✅ 배포 완료!"
          EOF