name: Test Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('pp-backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: pp-backend
        run: go mod download

      - name: Run tests
        working-directory: pp-backend
        env:
          DSN: postgres://test_user:test_password@localhost:5432/test_db?sslmode=disable
          JWT_SECRET: test_jwt_secret_12345678901234567890
          REFRESH_SECRET: test_refresh_secret_12345678901234567890
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: pp-backend/coverage.out

  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: pp-frontend/package-lock.json

      - name: Install dependencies
        working-directory: pp-frontend
        run: npm ci

      - name: Run TypeScript check
        working-directory: pp-frontend
        run: npm run type-check

      - name: Run ESLint
        working-directory: pp-frontend
        run: npm run lint

      - name: Run tests
        working-directory: pp-frontend
        run: npm test -- --coverage --watchAll=false

      - name: Build application
        working-directory: pp-frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8080
          NEXT_PUBLIC_WS_URL: ws://localhost:8082
        run: npm run build