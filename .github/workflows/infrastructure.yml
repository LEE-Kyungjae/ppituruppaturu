name: Infrastructure Management

on:
  push:
    branches: [main]
    paths:
    - 'pp-infrastructure/**'
  pull_request:
    branches: [main]
    paths:
    - 'pp-infrastructure/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform Action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  TF_VERSION: 1.6.0
  TF_WORKING_DIR: pp-infrastructure/terraform

jobs:
  terraform-validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform fmt -check -recursive

    - name: Terraform Validate
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform init -backend=false
        terraform validate

    - name: Security Scan with Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ${{ env.TF_WORKING_DIR }}
        framework: terraform
        output_format: sarif
        output_file_path: reports/results.sarif

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: reports/results.sarif

  terraform-plan:
    needs: terraform-validate
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure OCI Credentials
      run: |
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_CONFIG }}" > ~/.oci/config
        echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/private_key.pem
        chmod 600 ~/.oci/private_key.pem

    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init

    - name: Terraform Plan
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform plan \
          -var="tenancy_ocid=${{ secrets.OCI_TENANCY_OCID }}" \
          -var="user_ocid=${{ secrets.OCI_USER_OCID }}" \
          -var="fingerprint=${{ secrets.OCI_FINGERPRINT }}" \
          -var="private_key_path=~/.oci/private_key.pem" \
          -var="compartment_id=${{ secrets.OCI_COMPARTMENT_OCID }}" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -var="environment=${{ github.event.inputs.environment || 'dev' }}" \
          -out=tfplan

    - name: Save Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-${{ github.event.inputs.environment || 'dev' }}
        path: ${{ env.TF_WORKING_DIR }}/tfplan

  terraform-apply:
    if: github.event.inputs.action == 'apply'
    needs: terraform-plan
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure OCI Credentials
      run: |
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_CONFIG }}" > ~/.oci/config
        echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/private_key.pem
        chmod 600 ~/.oci/private_key.pem

    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan-${{ github.event.inputs.environment || 'dev' }}
        path: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init

    - name: Terraform Apply
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform apply -auto-approve tfplan

    - name: Export Terraform Outputs
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        echo "INSTANCE_IP=$(terraform output -raw app_server_public_ip)" >> $GITHUB_ENV
        terraform output -json > terraform-outputs.json

    - name: Save Infrastructure Info
      uses: actions/upload-artifact@v3
      with:
        name: infrastructure-info-${{ github.event.inputs.environment || 'dev' }}
        path: ${{ env.TF_WORKING_DIR }}/terraform-outputs.json

  terraform-destroy:
    if: github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure OCI Credentials
      run: |
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_CONFIG }}" > ~/.oci/config
        echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/private_key.pem
        chmod 600 ~/.oci/private_key.pem

    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init

    - name: Terraform Destroy
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform destroy -auto-approve \
          -var="tenancy_ocid=${{ secrets.OCI_TENANCY_OCID }}" \
          -var="user_ocid=${{ secrets.OCI_USER_OCID }}" \
          -var="fingerprint=${{ secrets.OCI_FINGERPRINT }}" \
          -var="private_key_path=~/.oci/private_key.pem" \
          -var="compartment_id=${{ secrets.OCI_COMPARTMENT_OCID }}" \
          -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" \
          -var="environment=${{ github.event.inputs.environment || 'dev' }}"

  k8s-deploy:
    if: github.event.inputs.action == 'apply' && github.event.inputs.environment != 'dev'
    needs: terraform-apply
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Deploy to Kubernetes
      run: |
        # Apply Kubernetes manifests
        kubectl apply -f pp-infrastructure/kubernetes/namespace.yaml
        kubectl apply -f pp-infrastructure/kubernetes/configmap.yaml
        kubectl apply -f pp-infrastructure/kubernetes/secrets.yaml
        kubectl apply -f pp-infrastructure/kubernetes/deployments/
        kubectl apply -f pp-infrastructure/kubernetes/ingress.yaml
        
        # Wait for deployments to be ready
        kubectl wait --for=condition=available --timeout=600s deployment/pitturu-backend -n pitturu-${{ github.event.inputs.environment }}
        kubectl wait --for=condition=available --timeout=600s deployment/pitturu-frontend -n pitturu-${{ github.event.inputs.environment }}

  cost-estimation:
    runs-on: ubuntu-latest
    needs: terraform-plan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan-${{ github.event.inputs.environment || 'dev' }}
        path: ${{ env.TF_WORKING_DIR }}

    - name: Run Infracost
      uses: infracost/infracost-gh-action@master
      env:
        INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
      with:
        path: ${{ env.TF_WORKING_DIR }}/tfplan
        terraform_plan_flags: -var-file=terraform.tfvars

    - name: Post Infracost comment
      uses: infracost/infracost-gh-action@master
      env:
        INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
      with:
        path: ${{ env.TF_WORKING_DIR }}/tfplan
        terraform_plan_flags: -var-file=terraform.tfvars
        post_condition: always
        show_skipped: true

  notification:
    if: always()
    needs: [terraform-validate, terraform-plan, terraform-apply]
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify infrastructure status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#infrastructure'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow