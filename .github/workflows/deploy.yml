name: Deploy Application

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: pitturu/backend
  FRONTEND_IMAGE_NAME: pitturu/frontend

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go (Backend)
      if: matrix.component == 'backend'
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache-dependency-path: pp-backend/go.sum

    - name: Setup Node.js (Frontend)
      if: matrix.component == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: pp-frontend/package-lock.json

    - name: Install Backend Dependencies
      if: matrix.component == 'backend'
      working-directory: pp-backend
      run: go mod download

    - name: Install Frontend Dependencies
      if: matrix.component == 'frontend'
      working-directory: pp-frontend
      run: npm ci

    - name: Run Backend Tests
      if: matrix.component == 'backend'
      working-directory: pp-backend
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Run Backend Linter
      if: matrix.component == 'backend'
      working-directory: pp-backend
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: pp-backend

    - name: Run Frontend Tests
      if: matrix.component == 'frontend'
      working-directory: pp-frontend
      run: |
        npm run test:ci
        npm run type-check
        npm run lint:check
        npm run format:check

    - name: Build Frontend
      if: matrix.component == 'frontend'
      working-directory: pp-frontend
      run: npm run build

    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./pp-${{ matrix.component }}/coverage.out
        flags: ${{ matrix.component }}
        name: ${{ matrix.component }}-coverage

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ matrix.component == 'backend' && env.BACKEND_IMAGE_NAME || env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./pp-${{ matrix.component }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: production

  deploy-dev:
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'dev'
    needs: build
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure OCI CLI
      run: |
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_CONFIG }}" > ~/.oci/config
        echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/private_key.pem
        chmod 600 ~/.oci/private_key.pem

    - name: Deploy to OCI Instance
      run: |
        # SSH to OCI instance and deploy
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/oci_key ubuntu@${{ secrets.OCI_INSTANCE_IP }} << 'EOF'
          cd /opt/pitturu
          git pull origin main
          docker-compose --profile dev down
          docker-compose --profile dev pull
          docker-compose --profile dev up -d
          docker system prune -f
        EOF

    - name: Health Check
      run: |
        sleep 30
        curl -f http://${{ secrets.OCI_INSTANCE_IP }}:8080/health
        curl -f http://${{ secrets.OCI_INSTANCE_IP }}:3000/api/health

  deploy-staging:
    if: github.event.inputs.environment == 'staging'
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Kubernetes Staging
      run: |
        echo "Deploying to staging environment"
        # kubectl commands for staging deployment

  deploy-prod:
    if: github.event.inputs.environment == 'prod'
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Production
      run: |
        echo "Deploying to production environment"
        # kubectl commands for production deployment

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  notification:
    if: always()
    needs: [test, build, deploy-dev]
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow