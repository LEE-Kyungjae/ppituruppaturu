name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 먼저 빌드 완료 확인
  check-build:
    runs-on: ubuntu-latest
    outputs:
      backend-exists: ${{ steps.check.outputs.backend-exists }}
      frontend-exists: ${{ steps.check.outputs.frontend-exists }}

    steps:
      - name: Check if images exist
        id: check
        run: |
          # GitHub Container Registry에서 이미지 확인
          if docker manifest inspect ghcr.io/${{ env.IMAGE_NAME }}-backend:${{ github.sha }} > /dev/null 2>&1; then
            echo "backend-exists=true" >> $GITHUB_OUTPUT
          else
            echo "backend-exists=false" >> $GITHUB_OUTPUT
          fi

          if docker manifest inspect ghcr.io/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }} > /dev/null 2>&1; then
            echo "frontend-exists=true" >> $GITHUB_OUTPUT
          else
            echo "frontend-exists=false" >> $GITHUB_OUTPUT
          fi

  # 실제 배포
  deploy:
    needs: check-build
    if: needs.check-build.outputs.backend-exists == 'true' && needs.check-build.outputs.frontend-exists == 'true'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Deploy to server
        run: |
          # Known hosts 추가
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

          # 서버에 배포
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # 배포 디렉토리로 이동
            cd /opt/pitturu || {
              echo "❌ /opt/pitturu 디렉토리가 없습니다. pp-infra에서 환경 설정을 먼저 해주세요."
              exit 1
            }

            # GHCR 로그인
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            # 기존 컨테이너 정리 (안전하게)
            if [ -f docker-compose.prod.yml ]; then
              docker-compose -f docker-compose.prod.yml down
            fi

            # 새 이미지 풀
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}

            # 환경변수 설정
            export BACKEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"
            export FRONTEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}"

            # docker-compose.yml을 이미지 기반으로 수정
            cat > docker-compose.prod.yml << 'COMPOSE_EOF'
          version: '3.8'
          services:
            postgres:
              image: postgres:15-alpine
              restart: unless-stopped
              environment:
                POSTGRES_DB: ${POSTGRES_DB:-pitturu_db}
                POSTGRES_USER: ${POSTGRES_USER:-postgres}
                POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
              ports:
                - "5432:5432"
              volumes:
                - postgres_data:/var/lib/postgresql/data
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
                interval: 30s
                timeout: 10s
                retries: 3

            redis:
              image: redis:7-alpine
              restart: unless-stopped
              ports:
                - "6379:6379"
              volumes:
                - redis_data:/data

            backend:
              image: ${BACKEND_IMAGE}
              restart: unless-stopped
              ports:
                - "8080:8080"
                - "8082:8082"
              environment:
                - DSN=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pitturu_db}?sslmode=disable
                - REDIS_URL=redis://redis:6379
                - JWT_SECRET=${JWT_SECRET}
                - REFRESH_SECRET=${REFRESH_SECRET}
              depends_on:
                postgres:
                  condition: service_healthy

            frontend:
              image: ${FRONTEND_IMAGE}
              restart: unless-stopped
              ports:
                - "3000:3000"
              environment:
                - NEXT_PUBLIC_API_URL=https://api.ppituruppaturu.com
                - NEXT_PUBLIC_WS_URL=wss://api.ppituruppaturu.com
              depends_on:
                - backend

          volumes:
            postgres_data:
            redis_data:
          COMPOSE_EOF

            # 환경변수 파일 확인
            if [ ! -f .env ]; then
              echo "⚠️  .env 파일이 없습니다. 수동으로 설정해주세요."
              exit 1
            fi

            # 컨테이너 시작
            docker-compose -f docker-compose.prod.yml up -d

            # 헬스체크 (30초 대기 후)
            echo "🔍 헬스체크 시작..."
            sleep 30

            if curl -f http://localhost:8080/health; then
              echo "✅ Backend 정상"
            else
              echo "❌ Backend 실패"
              exit 1
            fi

            if curl -f http://localhost:3000; then
              echo "✅ Frontend 정상"
            else
              echo "❌ Frontend 실패"
              exit 1
            fi

            # 오래된 이미지 정리
            docker image prune -af --filter "until=24h"

            echo "🚀 배포 완료!"
          EOF

      - name: 배포 결과 알림
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ 프로덕션 배포 성공: https://ppituruppaturu.com"
          else
            echo "❌ 프로덕션 배포 실패"
          fi