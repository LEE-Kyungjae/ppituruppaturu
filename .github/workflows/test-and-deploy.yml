name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  security-events: write

env:
  REGISTRY: docker.io
  IMAGE_NAMESPACE: ze2l/ppituruppaturu

jobs:
  frontend-tests:
    name: Frontend Quality Gates
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./pp-frontend

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: npm
        cache-dependency-path: pp-frontend/package-lock.json

    - name: Install dependencies
      run: npm ci
      env:
        HUSKY: 0

    - name: Lint
      run: npm run lint

    - name: Type check
      run: npm run type-check

    - name: Run unit tests
      run: npm test -- --coverage --watchAll=false

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./pp-frontend/coverage
        flags: frontend
        name: frontend-coverage

    - name: Build frontend
      run: npm run build

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Run E2E suite
      run: npx playwright test --reporter=line,html
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8080

    - name: Upload Playwright report on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: pp-frontend/playwright-report/
        if-no-files-found: error
        retention-days: 14

  backend-tests:
    name: Backend Quality Gates
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./pp-backend
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Verify initdb seed migrations
      working-directory: ..
      run: ./scripts/ensure-initdb.sh --check

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: pp-backend

    - name: Run unit tests
      run: go test -v -race -coverprofile=coverage.out ./...
      env:
        TEST_DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db?sslmode=disable

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./pp-backend/coverage.out
        flags: backend
        name: backend-coverage

    - name: Build backend binary
      run: go build -o bin/server cmd/server/main.go

    - name: Run integration tests
      run: go test -v -tags=integration ./...
      env:
        TEST_DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db?sslmode=disable

  mobile-tests:
    name: Mobile Quality Gates
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./pp_mobile

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.4'
        channel: stable

    - name: Install dependencies
      run: flutter pub get

    - name: Run tests
      run: flutter test --coverage

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./pp_mobile/coverage
        flags: mobile
        name: mobile-coverage

    - name: Build debug APK
      run: flutter build apk --debug

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: fs
        scan-ref: .
        format: sarif
        output: trivy-results.sarif

    - name: Upload Trivy report
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif

  build-images:
    name: Build & Push Images
    needs: [frontend-tests, backend-tests, mobile-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      backend-tag: ${{ steps.meta.outputs.backend-tag }}
      frontend-tag: ${{ steps.meta.outputs.frontend-tag }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Verify initdb seed migrations
      run: ./scripts/ensure-initdb.sh --check

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker info
      run: |
        docker version
        docker buildx version
        docker buildx ls

    - name: Docker registry login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Compute image tags
      id: meta
      run: |
        sha="${GITHUB_SHA::12}"
        ts=$(date -u +"%Y%m%d%H%M")
        echo "backend-tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-backend:${sha}" >> "$GITHUB_OUTPUT"
        echo "frontend-tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-frontend:${sha}" >> "$GITHUB_OUTPUT"
        echo "backend-tag-latest=${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-backend:latest" >> "$GITHUB_OUTPUT"
        echo "frontend-tag-latest=${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-frontend:latest" >> "$GITHUB_OUTPUT"
        echo "build-ts=$ts" >> "$GITHUB_OUTPUT"

    - name: Build & push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./pp-backend
        file: ./pp-backend/Dockerfile
        target: production
        platforms: linux/amd64
        push: true
        provenance: false
        tags: |
          ${{ steps.meta.outputs.backend-tag }}
          ${{ steps.meta.outputs.backend-tag-latest }}

    - name: Build & push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./pp-frontend
        file: ./pp-frontend/Dockerfile
        target: production
        platforms: linux/amd64
        push: true
        provenance: false
        tags: |
          ${{ steps.meta.outputs.frontend-tag }}
          ${{ steps.meta.outputs.frontend-tag-latest }}

  deploy:
    name: Blue/Green Deploy
    needs: [build-images, security-scan]
    if: needs.build-images.result == 'success'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: http://152.67.201.101

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

    - name: Prime known_hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        ssh -o ConnectTimeout=15 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'"

    - name: Pre-deployment port cleanup
      run: |
        echo "🧹 배포 전 포트 충돌 방지..."
        ssh -v ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} <<'EOF'
          set -euxo pipefail
          cd /opt/pitturu

          for port in 8081 8082 8083 8084; do
            echo "🔍 포트 점유 상태 확인: $port"
            docker ps --filter "publish=$port" --format 'table {{.ID}}\t{{.Names}}\t{{.Ports}}' || echo "포트 $port 비어있음"

            ids=$(docker ps --filter "publish=$port" -q || true)
            if [ -n "${ids:-}" ]; then
              echo "🧹 포트 $port 점유 컨테이너 정리: $ids"
              docker stop $ids || true
              docker rm $ids || true
            fi
          done

          echo "✅ 포트 정리 완료"
        EOF

    - name: Upload deployment artefacts
      run: |
        scp -v deploy-blue-green.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/pitturu/
        scp -v docker-compose.blue.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/pitturu/
        scp -v docker-compose.green.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/pitturu/
        scp -v nginx-blue.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        scp -v nginx-green.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        scp -v nginx-backend-api-blue.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        scp -v nginx-backend-api-green.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        scp -v nginx-backend-ws-blue.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        scp -v nginx-backend-ws-green.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        scp -v nginx-pitturu-site.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

    - name: Execute blue/green deployment
      run: |
        ssh -v ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} <<'EOF'
          set -euxo pipefail
          cd /opt/pitturu

          echo "🔐 Docker Hub 로그인"
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

          chmod +x deploy-blue-green.sh

          export BACKEND_IMAGE="${{ needs.build-images.outputs['backend-tag'] }}"
          export FRONTEND_IMAGE="${{ needs.build-images.outputs['frontend-tag'] }}"
          ./deploy-blue-green.sh

          echo "📊 최종 컨테이너 상태"
          docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}'
        EOF

    - name: Deployment summary
      run: |
        echo "## 🚀 Deployment" >> "$GITHUB_STEP_SUMMARY"
        echo "- Backend image: ${{ needs.build-images.outputs['backend-tag'] }}" >> "$GITHUB_STEP_SUMMARY"
        echo "- Frontend image: ${{ needs.build-images.outputs['frontend-tag'] }}" >> "$GITHUB_STEP_SUMMARY"
        echo "- Environment: production" >> "$GITHUB_STEP_SUMMARY"
