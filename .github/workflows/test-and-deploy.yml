name: Test and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend

jobs:
  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./pp-frontend

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: pp-frontend/package-lock.json

    - name: Install dependencies
      run: npm ci
      env:
        HUSKY: 0

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run unit tests
      run: npm test -- --coverage --watchAll=false

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./pp-frontend/coverage
        flags: frontend
        name: frontend-coverage

    - name: Build frontend
      run: npm run build

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run E2E tests
      run: npx playwright test --reporter=line,html
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8080

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report
        path: pp-frontend/playwright-report/
        if-no-files-found: error
        retention-days: 30

  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./pp-backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run linting
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: pp-backend

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      env:
        TEST_DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db?sslmode=disable

    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./pp-backend/coverage.out
        flags: backend
        name: backend-coverage

    - name: Build backend
      run: go build -o bin/server cmd/server/main.go

    - name: Run integration tests
      run: go test -v -tags=integration ./...
      env:
        TEST_DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db?sslmode=disable

  # Mobile Tests
  mobile-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./pp_mobile

    steps:
    - uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'

    - name: Install dependencies
      run: flutter pub get

    - name: Analyze code
      run: flutter analyze

    - name: Run tests
      run: flutter test --coverage

    - name: Upload mobile coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./pp_mobile/coverage
        flags: mobile
        name: mobile-coverage

    - name: Build APK
      run: flutter build apk --debug

  # Security Scans
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Deploy (only on main branch after all tests pass)
  build-and-deploy:
    needs: [frontend-tests, backend-tests, mobile-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      REGISTRY: docker.io
      IMAGE_NAME: ze2l/ppituruppaturu

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker Info & Debug
      run: |
        docker version
        docker buildx version
        docker buildx ls
        echo "=== Backend Context ==="
        ls -lah ./pp-backend
        test -f ./pp-backend/Dockerfile && echo "Backend Dockerfile found"
        echo "=== Frontend Context ==="
        ls -lah ./pp-frontend
        test -f ./pp-frontend/Dockerfile && echo "Frontend Dockerfile found"

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./pp-backend
        file: ./pp-backend/Dockerfile
        target: production
        platforms: linux/amd64
        push: true
        no-cache: true
        provenance: false
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
        outputs: type=registry

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./pp-frontend
        file: ./pp-frontend/Dockerfile
        target: production
        platforms: linux/amd64
        push: true
        no-cache: true
        provenance: false
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
        outputs: type=registry

    - name: Check deployment prerequisites
      run: |
        echo "🔍 Checking deployment prerequisites..."
        echo "SERVER_HOST: ${{ secrets.SERVER_HOST }}"
        echo "SERVER_USER: ${{ secrets.SERVER_USER }}"
        echo "DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}"
        echo "SSH key length: ${#DEPLOY_SSH_KEY}"
      env:
        DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

    - name: Test SSH connection
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        echo "🔐 Testing SSH connection..."
        ssh -o ConnectTimeout=10 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful!'"

    - name: Pre-deployment port cleanup
      run: |
        echo "🧹 배포 전 포트 충돌 방지..."
        ssh -v ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -euxo pipefail
          cd /opt/pitturu

          echo "🔍 8082 포트 점유 상태 확인"
          docker ps --filter "publish=8082" --format 'table {{.ID}}\t{{.Names}}\t{{.Ports}}' || echo "8082 포트 비어있음"

          echo "🧹 8082 점유 컨테이너 정리 (안전)"
          ids=$(docker ps --filter "publish=8082" -q || true)
          if [ -n "${ids:-}" ]; then
            echo "8082 점유 컨테이너 제거: $ids"
            docker stop $ids || true
            docker rm $ids || true
          fi

          echo "✅ 포트 정리 완료"
        EOF

    - name: Deploy to server (Blue/Green)
      run: |
        set -euxo pipefail

        echo "📁 Uploading deployment files..."
        scp -v deploy-blue-green.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/pitturu/
        scp -v docker-compose.blue.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/pitturu/
        scp -v docker-compose.green.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/pitturu/
        scp -v nginx-blue.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        scp -v nginx-green.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        scp -v nginx-backend-api-blue.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        scp -v nginx-backend-api-green.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        scp -v nginx-backend-ws-blue.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        scp -v nginx-backend-ws-green.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        scp -v nginx-pitturu-site.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

        echo "🚀 Starting Blue/Green deployment..."
        ssh -v ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -euxo pipefail
          cd /opt/pitturu

          echo "📁 Current directory: $(pwd)"
          echo "📁 Directory contents:"
          ls -la

          echo "🔧 Setting up Nginx configuration..."
          sudo mkdir -p /etc/nginx/upstreams
          sudo mkdir -p /etc/nginx/conf.d
          sudo mv /tmp/nginx-blue.conf /etc/nginx/upstreams/app-blue.conf
          sudo mv /tmp/nginx-green.conf /etc/nginx/upstreams/app-green.conf
          sudo mv /tmp/nginx-backend-api-blue.conf /etc/nginx/upstreams/nginx-backend-api-blue.conf
          sudo mv /tmp/nginx-backend-api-green.conf /etc/nginx/upstreams/nginx-backend-api-green.conf
          sudo mv /tmp/nginx-backend-ws-blue.conf /etc/nginx/upstreams/nginx-backend-ws-blue.conf
          sudo mv /tmp/nginx-backend-ws-green.conf /etc/nginx/upstreams/nginx-backend-ws-green.conf
          sudo mv /tmp/nginx-pitturu-site.conf /etc/nginx/sites-available/pitturu

          echo "🔐 Docker Hub login..."
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

          echo "🎯 Making deploy script executable..."
          chmod +x deploy-blue-green.sh

          echo "🔄 Executing Blue/Green deployment..."
          ./deploy-blue-green.sh

          echo "📊 Final container status:"
          docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}'

          echo "=== 헬스체크 상태 확인 ==="
          docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' | egrep 'green|blue|8081|8082|8083|8084' || true

          echo "=== Green 백엔드 헬스 로그 (최근 10회) ==="
          docker inspect -f '{{range .State.Health.Log}}{{.ExitCode}} {{.Output}}{{printf "\n"}}{{end}}' pitturu-green-backend-1 | tail -n 10 || true

          echo "=== 헬스 엔드포인트 직접 확인 ==="
          curl -I --max-time 5 http://127.0.0.1:3002/api/health || true

          echo "✅ Blue/Green deployment completed successfully!"
        EOF

    - name: Create deployment status
      uses: chrnorm/deployment-action@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        environment: production
        state: success

  # Notification
  notify:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'

    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.build-and-deploy.result }}" == "success" ]]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
